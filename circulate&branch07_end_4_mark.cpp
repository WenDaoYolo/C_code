#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<windows.h>
int main() {
	/*
		知识点

		1.计算机中的时间戳
		是时间换算成数字的结果,是计算机中一种时间的表示方法,用于计时
		
		因为计算机无法识别时间，而时间戳又不利于人们去阅读
		所以定义了时间与时间戳之间的换算

		换算规则:一个固定时间点(1970-1-1)到一个时间点之间有多少秒

		2.1970时间点
		计算机操作系统和编程技术的一个重要转折点
		Unix时间戳概念的诞生
		所以则规定以1970为计算机元年,开始计算机系统的计时


		3.rand()随机值函数					头文件:stdlib.h
		函数原型:int rand(void)
		随机生成并返回一个整数,其生成范围为0到RAND_MAX
		RAND_MAX是系统定义的标识符常量，规定其值至少为:0x7fff(即十进制32767)	
		本质上是伪随机的：程序运行时，rand会调用srand,根据种子数生成一系列随机值，生成后就会<固定不变>，在没有设置种子数的情况下则会默认
		使用种子数1，所以程序每次执行都是根据种子数1来生成这些值
		所以要实现真正意义上的随机值，其本质就是种子数的不同，不同的种子数便可以生成<不同种子数>的<固定序列数>

		4.srand()随机生成器函数				头文件:stdlib.h
		函数原型:void srand(unsinged int seed)		seed:种子，一种整数
		设置随机值函数的生成起点,随机生成函数会根据不同的种子生成不同序列的伪随机数——未设置的情况下，种子数默认为1
		例:srand(100)		设置种子数为100
		   srand(600)		设置种子数600
		   ...
		所以当种子数在不断发生改变时,就可以达到重复随机的效果了
		方法思路:给srand()传入一个不断变化的参数	   tip:将rand()传入是错误的,因为其本质是伪随机的
		
		电脑的系统时间是在实时发生变化，所以可以将系统时间对应的时间戳传入
		time()函数							头文件:time.h
		time(地址)							
		返回一个时间戳(调用这个函数时,系统的时间戳),若有地址参数,并将这个值赋值给参数地址对应的变量		
		返回值类型:结构体定义的time_t类型,(专门用来存储日历时间的类型,其本质上是整数类型)
		但传入的参数要求是无符号整型类型,所以还需要进行类型转换		现版本编译器更加智能,即使不手动转换也会进行自动转换
		两种赋值方法->
		地址赋值法：
		  time_t a
		  time(&a)				
		变量赋值法：
		  time_t a=time(NULL)		返回一个结果并且没有通过地址来赋值,而是通过=来赋值给变量

		注意赋值变量和结果的类型一致

		NULL是系统定义的一个void*类型的指针，其值为0
		void*类型(即没有指向任何有效的地址)，使它可以被赋值给任意类型的指针,有着很多其他的用法
		例如：检查定义的指针是否指向了有效的地址，从而避免空指针野指针的问题



	*/
	//test1
	for (int i = 1; i <= 10; i++) {	//第一次执行程序随机生成了10个数
		int c = rand();				//但后面反复运行程序，生成的始终是这10个顺序固定的数
		printf("%d\n", c);
	}
	//test2
	int test2;
	srand(1000);		//设置生成范围为1000-32767
	test2 = rand();		//所以生成的这个数一定是大于1000的
	printf("\ntest:%d\n",test2);

	//test3
	time_t t,y;
	t = time(NULL);
	Sleep(10000);	//10000ms=10s
	time(&y);
	printf("地址赋值法:%d\n",t);
	printf("等号赋值法:%d\n",y);

	//由于srand内部的实现原理,起始值只用设置一次(即只需调用一次time函数然后将结果传入srand)就可以达到重复随机的效果——>后续再深入了解
	return 0;
}
