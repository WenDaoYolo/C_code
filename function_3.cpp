#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int get_max(int a,int b) {			//接收实际参数
	return a > b ? a : b;			//返回值
}



void swap(int* a,int* b){			//不需要返回值，只需要进行交换	所以可以用void类型
	int temp;						//接收地址，通过地址去间接操作变量
	temp = *a;
	*a = *b;
	*b = temp;

}


int main() {
	/*

	为了符合函数算法的规范,必须有输出，返回值就是输出,
	void类型空函数除外，不需要返回值
	
	主函数规定使用int类型返回0

	自定义函数：用户自己设计编写的函数

	函数定义
	函数返回类型 函数名(类型 形参1,类型 形参2,...){			参数为任意
					函数体		代码块
				return 值(与返回类型对应);
	}

	调用函数
	函数名(实参1,实参2);		传入的实参要符合自定义函数的语法


	形参:形式参数,一块空间用来接收传入的实参,函数定义后,形参不会占用空间
	只在函数调用时才会开辟空间,调用结束后函数会<自动销毁>		所以形参的生命周期就是其函数的生命周期
	实参:实际参数,实际要参与计算的数据,实参创建后就会占用空间,是确定的值

	指针灵活方便的体现之一:
	由于局部变量和函数的特性,是单向的传值
	若想要在被调函数中来改变主调函数的变量
	可以通过指针形参来实现,传入地址,通过地址间接操作变量——><通过指针来将被调函数和主调函数的变量联系起来>
	
	总结:被调函数改变主调变量时需要指针，不改变则不需要指针

	*/
	int a = 10, b = 20;
	printf("%d", get_max(a, b));		//调用并传入实际参数
										//调用其他函数的函数	主调函数
										//被其他函数调用的函数	被调函数
										//main()函数,程序的入口和开始的地方,任何函数都从主函数开始，并且由主函数结束		即在主函数中调用其他函数
										//主函数结束		
	putchar('\n');
	int x = 30, y = 40;
	printf("交换前:x=%d,y=%d",x,y);
	swap(&x,&y);						//传入两个变量的地址
	printf("交换后:x=%d,y=%d", x, y);
									


	return 0;
}
