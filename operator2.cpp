#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>	
int main() {
	/*
	！原码，反码，补码是针对负数的！
	！正数的原反补一致！
	！！！数据在计算机中以补码的形式存储！！！

	~对其二进制所有位按位取反(包括符号位)
	*/
	int a = 0;
	printf("%d\n",~a);
	//原反补的转换
	//00000000 00000000 00000000 00000000补码(正数)
	//11111111 11111111 11111111 11111111补码(负数)
	//10000000 00000000 00000000 00000000转回原码=-1
	/*
	强制类型转换
	格式:(类型) 数据		语法中大多对空格没有要求，可加可不加
	*/
	int b=(int)3.14;//强制将3.14转换为整数
	float c = (float)3;//强制将3转换为浮点小数
	printf("%d\n",b);
	printf("%f\n", c);
	/*
	关系操作符
	==,>=,<=,!=		用于数据之间的比较

	逻辑操作符
	&&,||  与,或

	条件操作符(三目运算符,三目操作符)
	条件?表达式1:表达式2	条件为真执行表达式1，否则执行表达式2
	*/
	int test = 3;
	(test > 1) && (test < 4) ? printf("Yes\n") : printf("No\n");//逻辑操作符+条件运算符
	/*
	逗号表达式(操作符)--暂不深入研究
	将若干表达式通过逗号连接起来<形成一个表达式>,从左到右依次计算每一项的值,但最终整个式子以最后一项的值为结果
	表达式1,表达式2,...,表达式N
	*/
	int m;
	m = 3 + 4,m=5 + 2,m=7 + 7;//区别  m=表达式1?a:b;
	int test3 = (1, 2, 5,3+7,m+2);
	printf("%d\n",m);
	printf("%d\n", test3);
	/*
	其他操作符
	下标引用操作符	int a[10]={0};
					a[6]=0;
	函数调用操作符	printf(...);
					函数名(...);
					...即参数,也是函数调用操作符的操作对象,所以函数操调用作符可以操作任意个对象

	结构成员操作符...
	*,.,->
					
	*/
	return 0;
}