#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main() {
	/*
								
	for(初始化;判断;调整部分){for参数中,初始化只会执行一次(仅限单层循环)
		循环语句     代码块          
	}
	相比于while,将初始化，判断，调整部分集中到了一起更加方便


	tip:初始化和调整部分省略，可以在其他位置来控制循环体			          但有时候得注意对于多层循环的省略，是否会影响结果
	    判断部分省略，判断部分会恒为真								          所以不管其他部分怎样，判断部分省略便会死循环
		注意1:虽然可以省略，但仍需要遵守语法规则，所以要用空语句来代替原语法位置
		注意2:可以省略循环的控制部分，但要保证能够把控循环
	*/
	for (int i = 1; i <=10;) {	
		if (i == 5)					//注意循环体内的代码是否会改变for循环的控制
			break;					//建议1:for循环变量的控制尽量不要写在循环体内
		printf("%d\n", i);			//建议2:for循环变量控制采用左闭右开的方法(左边取等右边不取等)，可读性更好
			i++;					//--因为数组下标从0，有时候会引用到数组下标，左闭右开能更加直观看清循环次数(如i=0;i<10;i++)--10次	
	}

	int j = 0, k = 0;
	for (; j < 3; j++)
		for (; k < 3; k++)			//内层循环只会执行一次
 			printf("hehe\n");		//因为初始化在循环体外面，从而导致内层循环执行完后，再次进入时初始量不会初始化，从而不满足循环条件

	/*
	多变量控制for循环
	*/
	int test1, test2;						//判断部分可以写两个语句，也可以整合成一个语句――>(test1<10)&&(test2<15)
	for (test1 = 0, test2 = 10; test1 < 10, test2<15; test1++, test2++)		//部分与部分之间用;分隔		同部分语句和语句之间用,分隔
		printf("Yes\n");					//两个变量来控制整个循环(两个条件均满足才能进入循环)――――>条件1&&条件2
}