#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
/*
	操作符详解
	算术转换:又称寻常算术转换	又称向上转型
	当操作符操作的几个对象都是不同类型的数据时，就会进行算术转换	也是隐式的
	转换的规则是将操作数向其中精度更高的类型转换(即占用字节更大的类型，即向上转型)
	例如:int a=3;
		 float b=3.14;
		 a+b;则会把a算术转换,转为精度更高的float类型

	影响复合表达式求值的属性
	1.操作符优先级

	2.操作符的结合律

	3.操作符是否控制求值的顺序		
	1)逻辑与和2)逻辑或的逻辑截断3)三目操作符的判断分支求值4)逗号表达式的固定末尾求值

	先看操作符的优先级，优先级相同则取决于结合律	如:+是从左至右,!是从右至左,()聚组(固定结合律)

	()聚组优先级最高	....   逗号表达式优先级最低		  详见操作符优先及结合表operator_priority
	大部分情况下优先级情况:单目操作符>双目操作符>三目操作符


	即使掌握表达式求值的因素也不一定能很好的控制所有复合表达式求值,详见operator_7.png，_1,_2等     ->(了解知道即可)
	问题表达式，无效表达式，是不可控制的，要避免写这种表达式，属于垃圾代码

*/
int main() {
	int i = 1;		
	int a = (++i) + (++i) + (++i);		//可以通过调试转到反汇编查看其处理方式	   ->要抵制这种问题代码，垃圾代码
	printf("ret=:%d",a);

	//总结：不能通过操作符属性来控制计算机执行顺序的代码就是有问题的代码

	return 0;
}
